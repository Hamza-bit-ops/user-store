"use strict";(()=>{var e={};e.id=789,e.ids=[789],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},918:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>g,patchFetch:()=>b,requestAsyncStorage:()=>h,routeModule:()=>v,serverHooks:()=>x,staticGenerationAsyncStorage:()=>y});var s={};r.r(s),r.d(s,{GET:()=>m,POST:()=>f});var n=r(9303),o=r(8716),a=r(670),i=r(7070),u=r(8263),d=r(1185);let c=new d.Schema({userId:{type:d.Schema.Types.ObjectId,ref:"User",required:[!0,"User ID is required"]},type:{type:String,enum:["credit","debit"],required:[!0,"Account type is required"]},amount:{type:Number,required:[!0,"Amount is required"],min:[0,"Amount must be positive"]},description:{type:String,required:[!0,"Description is required"],maxlength:[200,"Description cannot be more than 200 characters"]}},{timestamps:!0});c.index({userId:1,createdAt:-1});let l=d.models.Account||(0,d.model)("Account",c);var p=r(1732);async function m(e,{params:t}){try{if(await (0,u.Z)(),!await p.Z.findById(t.id))return i.NextResponse.json({error:"User not found"},{status:404});let e=await l.find({userId:t.id}).sort({createdAt:1});return i.NextResponse.json({accounts:e},{status:200})}catch(e){return console.error("Failed to fetch accounts:",e),i.NextResponse.json({error:"Failed to fetch accounts"},{status:500})}}async function f(e,{params:t}){try{let{type:r,amount:s,description:n}=await e.json();if(!r||!s||!n)return i.NextResponse.json({error:"All fields are required"},{status:400});if(!["credit","debit"].includes(r))return i.NextResponse.json({error:"Invalid account type"},{status:400});if(s<=0)return i.NextResponse.json({error:"Amount must be positive"},{status:400});if(await (0,u.Z)(),!await p.Z.findById(t.id))return i.NextResponse.json({error:"User not found"},{status:404});let o=new l({userId:t.id,type:r,amount:s,description:n});return await o.save(),i.NextResponse.json({message:"Account entry added successfully",account:o},{status:201})}catch(e){if(console.error("Failed to add account entry:",e),"ValidationError"===e.name){let t=Object.values(e.errors).map(e=>e.message);return i.NextResponse.json({error:t.join(", ")},{status:400})}return i.NextResponse.json({error:"Failed to add account entry"},{status:500})}}let v=new n.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/users/[id]/accounts/route",pathname:"/api/users/[id]/accounts",filename:"route",bundlePath:"app/api/users/[id]/accounts/route"},resolvedPagePath:"D:\\Next Js\\user\\app\\api\\users\\[id]\\accounts\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:h,staticGenerationAsyncStorage:y,serverHooks:x}=v,g="/api/users/[id]/accounts/route";function b(){return(0,a.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:y})}},8263:(e,t,r)=>{r.d(t,{Z:()=>i});var s=r(1185),n=r.n(s);let o=process.env.MONGODB_URI;if(!o)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let a=global.mongoose??{conn:null,promise:null};global.mongoose=a;let i=async function(){if(a.conn)return a.conn;a.promise||(a.promise=n().connect(o,{bufferCommands:!1}));try{a.conn=await a.promise}catch(e){throw a.promise=null,e}return a.conn}},1732:(e,t,r)=>{r.d(t,{Z:()=>o});var s=r(1185);let n=new s.Schema({name:{type:String,required:[!0,"Please provide a name"],maxlength:[60,"Name cannot be more than 60 characters"]},number:{type:String,required:[!0,"Please provide a number"],unique:!0},address:{type:String,required:[!0,"Please provide an address"]}},{timestamps:!0});n.virtual("accounts",{ref:"Account",localField:"_id",foreignField:"userId"}),n.set("toJSON",{virtuals:!0}),n.set("toObject",{virtuals:!0});let o=s.models.User||(0,s.model)("User",n)}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[276,972],()=>r(918));module.exports=s})();